# -*- coding: utf-8 -*-
# 汉诺塔问题
def move(n, a, b, c): # 借助b将a上所有的盘子移动到c
    if n == 1:
        print(a, '-->', c)
    else:
        move(n-1,a,c,b)# 借助c将上面（n-1）个盘子从a移动到b
        move(1,a,b,c)# 将a上剩下的一个盘子从a移动到c
        move(n-1,b,a,c)# 借助a，将b上面（n-1）个盘子移动到c

# 想了一会，知道这个解题思路怎样解释比较好了：
# 首先设定三个针为起始针，辅助针，和目的针
# 题目的目标是将起始针上所有的盘子一个一个，大小顺序不变地移动到目的针上；具体搜索：汉诺塔
# 那么每次移动简化为三个步骤
# 1.中间之前的步骤：A-->B把起始针上除了最底下的盘子（需要移动的盘子中最大的）之外的所有盘子，视为一个整体，按次序移动到辅助针上，至于如何移动，是下一个move所解决的
# 2.这是中间的一个步骤：A-->C把那个最大的盘子，移动到目的针上，固定位置，无需再动。
# 3.中间之后的步骤：B-->C把现在辅助针上的所有盘子视作整体，依次移动到目的针上；（借助原先的起始针）。
# 如果只有一个盘子，那么将它直接从起始针移动到目的针。
# 这样不断地将相对最大的盘子移动到目的针上，就完成了。
# https://blog.csdn.net/not_guy/article/details/72823951

